{
  "abi": [],
  "allSourcePaths": {
    "105": "contracts/openzeppelin/contracts/utils/Counters.sol",
    "30": "contracts/openzeppelin/contracts/math/SafeMath.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin/contracts/utils/Counters.sol",
    "exportedSymbols": {
      "Counters": [
        15641
      ]
    },
    "id": 15642,
    "license": null,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 15593,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:105"
      },
      {
        "absolutePath": "contracts/openzeppelin/contracts/math/SafeMath.sol",
        "file": "../math/SafeMath.sol",
        "id": 15594,
        "nodeType": "ImportDirective",
        "scope": 15642,
        "sourceUnit": 7457,
        "src": "25:30:105",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 15595,
          "nodeType": "StructuredDocumentation",
          "src": "57:571:105",
          "text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`\n Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n directly accessed."
        },
        "fullyImplemented": true,
        "id": 15641,
        "linearizedBaseContracts": [
          15641
        ],
        "name": "Counters",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 15598,
            "libraryName": {
              "contractScope": null,
              "id": 15596,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7456,
              "src": "658:8:105",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$7456",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "652:27:105",
            "typeName": {
              "id": 15597,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "671:7:105",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "canonicalName": "Counters.Counter",
            "id": 15601,
            "members": [
              {
                "constant": false,
                "id": 15600,
                "mutability": "mutable",
                "name": "_value",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 15601,
                "src": "1024:14:105",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 15599,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1024:7:105",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Counter",
            "nodeType": "StructDefinition",
            "scope": 15641,
            "src": "685:374:105",
            "visibility": "public"
          },
          {
            "body": {
              "id": 15611,
              "nodeType": "Block",
              "src": "1139:38:105",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 15608,
                      "name": "counter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15603,
                      "src": "1156:7:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Counter_$15601_storage_ptr",
                        "typeString": "struct Counters.Counter storage pointer"
                      }
                    },
                    "id": 15609,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "_value",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 15600,
                    "src": "1156:14:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 15607,
                  "id": 15610,
                  "nodeType": "Return",
                  "src": "1149:21:105"
                }
              ]
            },
            "documentation": null,
            "id": 15612,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "current",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 15604,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15603,
                  "mutability": "mutable",
                  "name": "counter",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 15612,
                  "src": "1082:23:105",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$15601_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 15602,
                    "name": "Counter",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 15601,
                    "src": "1082:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$15601_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1081:25:105"
            },
            "returnParameters": {
              "id": 15607,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15606,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 15612,
                  "src": "1130:7:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 15605,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1130:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1129:9:105"
            },
            "scope": 15641,
            "src": "1065:112:105",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 15623,
              "nodeType": "Block",
              "src": "1236:125:105",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 15621,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 15617,
                        "name": "counter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15614,
                        "src": "1335:7:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$15601_storage_ptr",
                          "typeString": "struct Counters.Counter storage pointer"
                        }
                      },
                      "id": 15619,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "_value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 15600,
                      "src": "1335:14:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "31",
                      "id": 15620,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1353:1:105",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1335:19:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 15622,
                  "nodeType": "ExpressionStatement",
                  "src": "1335:19:105"
                }
              ]
            },
            "documentation": null,
            "id": 15624,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "increment",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 15615,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15614,
                  "mutability": "mutable",
                  "name": "counter",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 15624,
                  "src": "1202:23:105",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$15601_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 15613,
                    "name": "Counter",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 15601,
                    "src": "1202:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$15601_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1201:25:105"
            },
            "returnParameters": {
              "id": 15616,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1236:0:105"
            },
            "scope": 15641,
            "src": "1183:178:105",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 15639,
              "nodeType": "Block",
              "src": "1420:55:105",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 15637,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 15629,
                        "name": "counter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15626,
                        "src": "1430:7:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$15601_storage_ptr",
                          "typeString": "struct Counters.Counter storage pointer"
                        }
                      },
                      "id": 15631,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "_value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 15600,
                      "src": "1430:14:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "31",
                          "id": 15635,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1466:1:105",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 15632,
                            "name": "counter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15626,
                            "src": "1447:7:105",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Counter_$15601_storage_ptr",
                              "typeString": "struct Counters.Counter storage pointer"
                            }
                          },
                          "id": 15633,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 15600,
                          "src": "1447:14:105",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 15634,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 7306,
                        "src": "1447:18:105",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 15636,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1447:21:105",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1430:38:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 15638,
                  "nodeType": "ExpressionStatement",
                  "src": "1430:38:105"
                }
              ]
            },
            "documentation": null,
            "id": 15640,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decrement",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 15627,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15626,
                  "mutability": "mutable",
                  "name": "counter",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 15640,
                  "src": "1386:23:105",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$15601_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 15625,
                    "name": "Counter",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 15601,
                    "src": "1386:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$15601_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1385:25:105"
            },
            "returnParameters": {
              "id": 15628,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1420:0:105"
            },
            "scope": 15641,
            "src": "1367:108:105",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 15642,
        "src": "629:848:105"
      }
    ],
    "src": "0:1478:105"
  },
  "bytecode": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220338c888614b80624b770a32a81a392a1b92300cfeb2d48982582a155a8cd026464736f6c634300060c0033",
  "bytecodeSha1": "3b4158955f564edb18bd7a8ffdb49859c904f0b7",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.6.12+commit.27d51765"
  },
  "contractName": "Counters",
  "coverageMap": {
    "branches": {
      "105": {},
      "30": {}
    },
    "statements": {
      "105": {},
      "30": {}
    }
  },
  "dependencies": [
    "SafeMath"
  ],
  "deployedBytecode": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220338c888614b80624b770a32a81a392a1b92300cfeb2d48982582a155a8cd026464736f6c634300060c0033",
  "deployedSourceMap": "629:848:105:-:0;;;;;;;;",
  "language": "Solidity",
  "natspec": {
    "author": "Matt Condon (@shrugs)",
    "details": "Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath} overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.",
    "kind": "dev",
    "methods": {},
    "title": "Counters",
    "version": 1
  },
  "offset": [
    629,
    1477
  ],
  "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER DUP13 DUP9 DUP7 EQ 0xB8 MOD 0x24 0xB7 PUSH17 0xA32A81A392A1B92300CFEB2D48982582A1 SSTORE 0xA8 0xCD MUL PUSH5 0x64736F6C63 NUMBER STOP MOD 0xC STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        629,
        1477
      ],
      "op": "PUSH20",
      "path": "105",
      "value": "0x0"
    },
    "21": {
      "fn": null,
      "offset": [
        629,
        1477
      ],
      "op": "ADDRESS",
      "path": "105"
    },
    "22": {
      "fn": null,
      "offset": [
        629,
        1477
      ],
      "op": "EQ",
      "path": "105"
    },
    "23": {
      "fn": null,
      "offset": [
        629,
        1477
      ],
      "op": "PUSH1",
      "path": "105",
      "value": "0x80"
    },
    "25": {
      "fn": null,
      "offset": [
        629,
        1477
      ],
      "op": "PUSH1",
      "path": "105",
      "value": "0x40"
    },
    "27": {
      "fn": null,
      "offset": [
        629,
        1477
      ],
      "op": "MSTORE",
      "path": "105"
    },
    "28": {
      "fn": null,
      "offset": [
        629,
        1477
      ],
      "op": "PUSH1",
      "path": "105",
      "value": "0x0"
    },
    "30": {
      "fn": null,
      "offset": [
        629,
        1477
      ],
      "op": "DUP1",
      "path": "105"
    },
    "31": {
      "fn": null,
      "offset": [
        629,
        1477
      ],
      "op": "REVERT",
      "path": "105"
    }
  },
  "sha1": "fa6c36aef8e434a26d06b5b67cacd55185bb614f",
  "source": "pragma solidity ^0.6.0;\n\nimport \"../math/SafeMath.sol\";\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n",
  "sourceMap": "629:848:105:-:0;;;;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin/contracts/utils/Counters.sol",
  "type": "library"
}